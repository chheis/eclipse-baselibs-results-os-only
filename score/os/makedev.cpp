/********************************************************************************
 * Copyright (c) 2025 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/
#include "score/os/makedev.h"

#if defined(__QNX__)
#include <sys/netmgr.h>
#else
#include <sys/sysmacros.h>
#endif

namespace score
{
namespace os
{

namespace
{

class MakeDevImpl final : public MakeDev
{
  public:
    /* KW_SUPPRESS_START:AUTOSAR.MEMB.VIRTUAL.FINAL: Compiler warn suggests override */
    /* KW_SUPPRESS_START:MISRA.USE.EXPANSION: OS library macros */
    dev_t make_dev(std::uint32_t major, std::uint32_t minor) const noexcept override
    /* KW_SUPPRESS_END:MISRA.USE.EXPANSION: OS library macros */
    /* KW_SUPPRESS_END:AUTOSAR.MEMB.VIRTUAL.FINAL: Compiler warn suggests override */
    {
// Suppress "AUTOSAR C++14 A16-0-1" rule findings. This rule stated: "The pre-processor shall only be used for
// unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef,
// #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include.".
// Rationale: Pre-processor commands are used to allow different implementations for linux and QNX to exist
// in the same file. It also prevents compiler errors in linux code when compiling for QNX and vice versa.
// coverity[autosar_cpp14_a16_0_1_violation]
#if defined(__QNX__)
        // Suppress "AUTOSAR C++14 M5-8-1", The rule states: "The right hand operand of a shift operator shall lie
        // between zero and one less than the width in bits of the underlying type of the left hand operand."
        // Rationale: violation is happening out of our code domain due to QNX - makedev macro. No harm to our code.
        // coverity[autosar_cpp14_m5_8_1_violation]
        return makedev(ND_LOCAL_NODE, major, minor);
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#else
        /* KW_SUPPRESS_START:MISRA.USE.EXPANSION: OS library macros */
        return makedev(major, minor);
        /* KW_SUPPRESS_END:MISRA.USE.EXPANSION: OS library macros */
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#endif
    }

    /* KW_SUPPRESS_START:AUTOSAR.MEMB.VIRTUAL.FINAL: Compiler warn suggests override */
    std::uint32_t get_major(dev_t device) const noexcept override
    /* KW_SUPPRESS_END:AUTOSAR.MEMB.VIRTUAL.FINAL: Compiler warn suggests override */
    {
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#if defined(__QNX__)
        return static_cast<std::uint32_t>(major(device));
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#else
        /* KW_SUPPRESS_START:MISRA.USE.EXPANSION: OS library macros */
        return major(device);
        /* KW_SUPPRESS_END:MISRA.USE.EXPANSION: OS library macros */
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#endif
    }

    /* KW_SUPPRESS_START:AUTOSAR.MEMB.VIRTUAL.FINAL: Compiler warn suggests override */
    std::uint32_t get_minor(dev_t device) const noexcept override
    /* KW_SUPPRESS_END:AUTOSAR.MEMB.VIRTUAL.FINAL: Compiler warn suggests override */
    {
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#if defined(__QNX__)
        return static_cast<std::uint32_t>(minor(device));
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#else
        /* KW_SUPPRESS_START:MISRA.USE.EXPANSION: OS library macros */
        return minor(device);
        /* KW_SUPPRESS_END:MISRA.USE.EXPANSION: OS library macros */
// coverity[autosar_cpp14_a16_0_1_violation], see above rationale
#endif
    }
};

}  // namespace
}  // namespace os
}  // namespace score

score::os::MakeDev& score::os::MakeDev::instance() noexcept
{
    static score::os::MakeDevImpl implInstance;  // LCOV_EXCL_BR_LINE : all branches are generated by certified compiler,
                                               // no additional check necessary
    return select_instance(implInstance);
}
